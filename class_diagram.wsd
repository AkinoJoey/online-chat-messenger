@startuml all
Server --o ChatRoom
ChatRoom -o ChatClient

' サーバー側のコード。クライアントのリクエストを受けて、チャットルームを作成したり、チャットルームにジョインさせたりする
class Server{
    sock: socket
    address: String
    port: int
    chatrooms: HashMap<String chatroomName, Chatroom chatroom>
    constructor()
    accept(): void
    get_user_data(connection, client_address): void
    convert_user_data_to_string(connection,SIZE_OF_DATA_SEND_AND_RECEIVE_PER_ONCE): string
    prompt_chatroom_name(self,connection, SIZE_OF_DATA_SEND_AND_RECEIVE_PER_ONCE, service_type): string
    make_chat_client(user_name, address, port, service_type): ChatClient
    send_port_number(connection,port,SIZE_OF_DATA_SEND_AND_RECEIVE_PER_ONCE): void
    make_chatroom(chatroom_port,room_name, max_member, client): ChatRoom
    add_client_to_chatroom(client, room_name): void
    delete_empty_chatroom():
    check_chat_room_capacity(room_name): boolean
}

class ChatClient{
    user_name: String
    address: String
    port: int
    status: String 
    constructor(user_name, adress, port,status)
}

class ChatRoom{
    sock: socket
    address: String
    port: int
    room_name: String
    max_member: int
    participants: HashMap<String address + port: ChatClient clienct>
    hostMap: HashMap<String address + port, ChatClient client>
    constructor(roomName, maxMember, client)
    start_chat(): void
    receve_data(): void
    exist_participants(): boolean
    extract_message(data): string
    delete_participant(address): void
    send_message(message, sender): void
    announce_from_server(message): void
}

@enduml


サービスの流れ
・ユーザー名を入力
・「新しいチャットルームを作成しますか？」「既存のチャットルームに参加しますか？」

【チャットルームを作成する場合】
・「チャットルームの名前、最大参加者数を入力してください」
・作成したクライアントがホストとして指定されたチャットルームが作成される
・「このチャットルームを終了しますか？」

【既存のチャットルームに参加する場合】
・「参加したいチャットルームのアドレスとポートを入力してくだい」
・「○○がホストの、｛チャットルーム名｝に参加しますか？」
・チャットルームに参加
・「このチャットルームから退出しますか？」

システムの流れ
【サーバー側】
・Python3 server.pyを実行
・ユーザーに名前を促す
・サービス内容を促す
・チャットルームを作成する場合は、TCP接続をして、チャットルームの名前と最大参加者数を促す
・チャットルームを作成して、チャットルーム側でホストに対してUDP接続をする

・既存のチャットルームに参加する場合は、HashMapでチャットルームを検索
・チャットルームにクライアントを追加して、UDP接続

【クライアント側】
・Python3 client.pyを実行
・名前を入力
・サービス内容を選択
・新しいチャットルームを作成する場合は、TCP接続を開始、名前と最大参加者数を入力する
・チャットルームに参加して、チャットを開始する

・既存のチャットルームに参加する場合は、参加したいチャットルームの名前を入力する
・チャットルームに参加して、チャットを開始する



memo
・TCP接続の場合は、サーバー側のアドレス（ポート）が必要。クライアントはそこにソケットを接続するから、クライアント側のアドレス（ポート）は不要。
・UDP接続の場合は、サーバー側とクライアント側両方ともアドレス（ポート）が必要。クライアントはデータを受信する際は、自分のアドレス（ポート）に紐づける。送信する際はサーバー側のアドレス（ポート）に対して送信する。
